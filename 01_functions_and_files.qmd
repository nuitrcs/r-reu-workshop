---
title: "part 1"
format: html
editor_options:
  chunk_output_type: console
---

## Console and R Commands

We can type basic math equations in the console. Click Run Code to give it a try.

```{r, eval=FALSE}
2+2
3^2
(2+3)/(5+7)
```

```{r, math1, exercise=TRUE, exercise.eval = FALSE}

```

We can also do Boolean comparisons -- expressions that result in TRUE or FALSE

-   == for testing equality
-   ! means NOT
-   & is AND, \| is OR

```{r, math2, exercise=TRUE, exercise.eval = FALSE}
3 > 2
5 == 25/5
"cat" != "dog"
!TRUE
```

```{r, math3, exercise=TRUE, exercise.eval = FALSE}
TRUE & FALSE
TRUE | FALSE
```

### Tips

-   There's a space after the prompt (`>`)
-   If you see a `+` instead of a `>`, R thinks the previous command wasn't finished and expects more input
    -   If you're stuck with a `+`, you can use Control+C or the escape (esc) key to cancel the command and get the normal `>` prompt back.
-   Use the up and down arrow keys to cycle through previous commands
    -   List of previous commands is in the History tab in RStudio (with the Environment tab)
-   Output starts with `[1]`; this number indexes the output values, since there can be more than one value as output

# Functions: Introduction

Functions allow us to perform operations that are more complicated than simple math. We call functions with the syntax of `functionname(input_values)`.

Examples:

```{r}
log(10)  # natural log
sqrt(4)  # square root
exp(1)   # constant e
nchar("rstudio")  # number of characters 
```

Not all functions require an input value

```{r}
timestamp()
list.files()
```

## Function Names: Case Sensitive

Names of functions -- and other things -- in R are case sensitive

```{r, eval=FALSE}
Log(10)  # gives an error
```

## Using Functions in Expressions

Functions can be combined in more complex expressions:

```{r}
sqrt(25) + sqrt(30)
log(10) * 4
```

## Nesting Function Calls

Functions can nest inside each other; they are evaluated from the inside out like a math equation would be

```{r}
log(exp(100))
sqrt(abs(sin(-3)))
```

## Multiple Inputs/Arguments

Many functions have multiple arguments or input values.

Some take multiple inputs of the same type

```{r}
paste("cats", "are", "furry")  # concatenates, or joins, text together
sum(3, 5, 9)                   # adding multiple values
```

Most functions take different types of inputs. Most input arguments are named.

Specify input arguments with `name_of_argument=value`

```{r}
log(100, base=10)
round(3.14159, digits=2)
```

## TRY IT

Compute the base 16 log of 4, multiply by 3.45, and then round the result to 3 decimal places.

```{r}

```

## Default Arguments

Many functions have default values for arguments. If the value of an argument is not explicitly specified, the default is used instead.

```{r}
# default value for the argument sep (separator) is a space " "
paste("cats", "are", "furry")  
paste("cats", "are", "furry", sep="***")
```

```{r}
# default value for the argument base is exp(1), 
# which is the constant e for a natural logarithm
log(100)
log(100, base=10)
```

## Function Definitions

How do you find out what arguments a function takes? The R documentation/help. The documentation is available in the Help tab in RStudio (bottom right window by default); enter the name for a specific function in the search box to pull up the documentation page for the function. Note that the search box does not work well for finding documentation if you do not already know the function name.

You can also open the documentation page for a particular function from the R prompt with `?functionname`

```{r}
?log
```

## Finding Function Names

The documentation will help you learn about a function if you know it's name, but how do you figure out the name in the first place?

Here are two reference sheets that can help you get started with basic functions:

-   https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf
-   https://cran.r-project.org/doc/contrib/Short-refcard.pdf

Beyond these, asking AI coding tools (like ChatGPT, Claude, Gemini, etc.) can be useful.

When working on specific analyses, online tutorials and package documentation are useful for identifying more specific functions.

# File paths and Working Directory

The **working directory** is the default folder on your computer where R looks for files to read and where it saves any new files. Think of it as the "home base" for R---unless you tell it otherwise, it will look for and save files in that location.

Check the working directory:

```{r}
getwd()
```

You can **set** the working directory to a folder of your choice. You can set it or go to it in the Files pane (under the More menu), or with functions.

```{r, eval=FALSE}
setwd("r-reu-workshop/") # this is an example -- file path needs to be valid
```

## File paths

A **file path** tells R where a file is located on your computer. There are two types:

1.  **Absolute** path (full address from the root)

    ```{r}
    read.csv("Users/ritika/data/nhanes.csv") # this is an example -- file path needs to be valid
    ```

2.  **Relative** path (from the working directory)

    ```{r}
    read.csv("data/nhanes.csv")
    ```

# Importing a CSV File: Basics

R can import many types of data files, but we'll start with a comma separated values (CSV) file. The file "data/nhanes.csv" is a rectangle of data with rows of observations and columns of variables, each column having a name in the first row.

```{r}
healthdata <- read.csv("data/nhanes.csv")
```

What's going on in the statement above:

-   We specify the file path, "data/nhanes.csv", relative to R's *working directory* which is the folder that R looks in first for any data or files.
-   We're providing the file path, "data/nhanes.csv", as input to the function `read.csv()`. The function returns the contents of the file as a `data.frame`, which we'll learn more about.
-   We save the data set into a variable called `healthdata` using the assignment operator: `<-`. This will allow us to use the name "healthdata" to refer to the dataset later. "healthdata" is a name we chose; we could have picked a different name. `healthdata` now appears in the Environment tab in RStudio, which shows all of the variables we've created.

::: callout-tip
## RStudio Tip: File Path Suggestions

In RStudio, when you're importing a file, if you type quotation marks, and then put your cursor between the quotation marks and hit tab, a menu will pop up listing the files and folders in the current working directory. You can then choose the file from the menu.

If you choose a folder initially, just hit tab again to get the list of the contents of that folder, until you find the file you want to import.

This is helpful for avoiding typos in file names and so you can see what's accessible from the current working directory.
:::

# Get Information about a Data Frame

We can use functions to get information about the data frame `healthdata`. We call functions with the syntax of `functionname(input_values)`.

## View it

We can open the data in a spreadsheet-like viewer:

```{r}
View(healthdata)
```

Or we can print out the contents to the console. Typing the variable name `healthdata` will print everything, which won't be very helpful, because it's too much output. Instead, we can print the first few rows with `head()`:

```{r}
head(healthdata)
```

## Dimensions/Size

After importing data, it's good to check that the data frame has the number of rows and columns expected.

```{r}
nrow(healthdata)  # number of rows/observations
ncol(healthdata)  # number of columns/variables
dim(healthdata)   # both numbers at once: rows, columns
```

## Information on Data Frame Variables

We have two types of "variables":

-   Objects or values we store with a name in R, which appear in the Environment tab in RStudio
-   The columns of a data frame

In both cases, the variables have names that we'll be able to use to refer to either the entire data set (`healthdata`) or the individual columns.

We can get information on what variables are included and the data type of each column with `str()`:

```{r}
str(healthdata)   # str is short for structure
```

Core data types are:

-   `int` (integer): whole numbers, positive or negative
-   `chr` (character): text
-   `num` (numeric): numbers including decimal values
-   `logi` (logical): true and false values

There are additional data types that can result from transforming variables, such as dates and factors for categorical variables.

The output of `str()` is also what you can see in the Environment tab in RStudio.

## Variable (Column) Names

We'll need to reference the column names frequency. To see those more compactly than with `str()`, use `names()`

```{r}
names(healthdata)
```

### Data Set Information

We'll be working with this data set throughout the workshop. Here is some information about the variables:

-   **id**: unique ID for the participant
-   **survey_year**: 2 different survey years: "2009_10" "2011_12"
-   **gender**: male or female
-   **age**: age in years (integer values)
-   **age_decade**: categorical age grouping
-   **education**: education level completed, text values
-   **marital_status**: marital status, text values
-   **work_status**: work status, text values
-   **income_poverty_ratio**: ratio of participant income to the poverty line
-   **weight**: weight in kg
-   **height**: height in cm
-   **pulse**: heart beats per minute
-   **bp_sys1**: first systolic (top) blood pressure measure
-   **bp_dia1**: first diastolic (bottom) blood pressure measure
-   **bp_sys2**: second systolic (top) blood pressure measure
-   **bp_dia2**: second diastolic (bottom) blood pressure measure
-   **bp_sys3**: third systolic (top) blood pressure measure
-   **bp_dia3**: third diastolic (bottom) blood pressure measure
-   **cholesterol**: total cholesterol, in millimoles per liter (mmol/L); multiply by 38.67 to convert to US measure in mg/dL
-   **health_level**: participant-reported overall health level, categorical
-   **sleep_hours**: number of hours of sleep per weeknight, integer values
-   **sleep_trouble**: binary indicator of whether participant has sleep problems (Yes/No)
-   **physically_active**: binary indicator of whether participant participates in at least moderate physical activities (Yes/No)

# 
